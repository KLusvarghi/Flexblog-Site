* {
  margin: 0;
  padding: 0;
  text-decoration: none;
  list-style: none;
}

body {
  color: #222222;
  font-family: "Nunito", helvetica, arial, sans-serif;
  box-sizing: border-box; /* Para em textos grandes o conteúdo respeite o tamanho da box, assim quando definido uma box de 300px, ele não somre os 300px + op tamanho do conteúdo, e sim a box + o conúdo tenham no maximo juntos 300px */
}

a {
  text-decoration: none;
}

img {
  display: block;
  max-width: 100%; /* Para que as imagens fiquem responsivas e não percam a qualidade */
}

/* Variable Color */

:root {
  --superinfo-bg: #122ab2;
  --menu-bg: #2c70ff;
  --color-text: #7c7c7c;
  --text-h2: #a4a4a4;
  --background-sections: #f7f7f7;
  --purple: #ae81ff;
  --pink: #f9265e;
  --blue: #66d9eb;
}





/* SuperInfo */

.superinfo-bg {
  background: var(--superinfo-bg);
  color: #FFF;
}

.superinfo {
  max-width: 960px;
  margin: 0 auto; /* 0 para cima/baixo e automatico para os lados, assim alinhando ao centro*/
  display: flex; /* Ficando um ao lado do outro respeitando o tamanho certinho do elemento*/
  justify-content: space-between; /* alinhando o conteudo com espaçamento entre os elementos*/
  flex-wrap: wrap; /* para que o conteudo quebre para a proxima linha quando não couber mais na tela */
  padding-top: 10px;
}

.superinfo p, .superinfo a {
  margin: 0 10px 10px 10px;
}


.superinfo a {
  color: #FFF;
}





/* Menu */

.menu-bg {
  background: var(--menu-bg);
}

.menu { /* Como eu quero que a "div" e a "nav" sejam display 'flex', é neste container que eu tenho que aplicar a estilização */
  max-width: 960px;
  margin: 0 auto;
  padding: 15px 0;
  display: flex; /* Deixando um container ao lado do outro, assim os itens do nav ainda são display 'block', apenas o "nav" é display flex*/
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center; /* Alinhando os itens ao centro */
}

.menu a { /* Pegadando todos os a do "menu"*/
  color: #FFF;
}

.menu-logo a { /* Falando com minha logo*/
  font-size: 2.25em; /* Sendo 'em' uma medida que é dividida por 16 em relação a outra medida que seja 'px'*/
  font-weight: bold;
  margin: 0 10px; /* Passando esee margin para que quando diminua a tela o h1(logo) não fique grudado no contaiener direito e esquerdo, que é o canto do site */
}

.menu-nav ul{
  display: flex; /* Para tornar os itens dentro do ul (lista) flexiveis*/
  flex-wrap: wrap;
}

.menu-nav a {
  font-size: 1.25em;
  display: block; /* Por padrão a tag "a" é flex, passando o display block para que possamo influenciar no padding dele */
  padding: 10px;
}

.menu-nav a:hover {
  color: var(--superinfo-bg);
}





/* Introdução */

.introducao {
  font-size:3em;
  line-height: 1; /* Altura da linha*/
  max-width: 960px;
  margin: 0 auto; /* Assim alinhando com o restante do conteúdo acima*/
  padding: 60px 10px
}





/* Sobre */

.sobre {
  border-top: 1px solid var(--menu-bg); /* Criando linhas horizontais*/
  border-bottom: 1px solid var(--menu-bg);
  max-width: 960px;
  margin: 0 auto; /* Assim alinhando ao centro */
  padding: 60px 0; /* Para dar uma separada da linha ao "Sobre*/ 
  display: flex; /* Fazedn o com que deixe os itens detro dele um ao lado do outro */
  flex-wrap: wrap; /* Para que as imagens quebrem */
}


.sobre-info {
  /* flex: 2 1 0; quando usamos ele da maneir aque stá embaixo ele faz: 2 para o flex-grow; flex-shink: 1; flex-basis: 0 */

  /* tendo esse "shink" de '1' por que caso ele sejá '0', quando o conteúdo chegar a 300px ou menos, ele não tentará mais enchaixar o conteúdo na tela e irá apenas ficar fixo  */
  flex: 2 1 300px; /* Colocando como "flex: 2" para que as informações ocupe 2 vezes mais espaço do que as imagens, ocupando praticamente a metade do container */
  /* margin: 0 10px; */


  /* Asiconando um "flex-basis", passando um valor para que ele quebre até ele cehagr o valor mínimo passado, então nesse caso quando ele chegar aos 300px ele irá quebrar, e não esperar o conteúdo ficar minímo e só assim quebrar */

}

.sobre-info h1 {
  font-size: 3em;
  margin-bottom: .5em;
}

.sobre-info p {
  font-size: 1.25em;
  line-height: 1.4;
  margin-bottom: 1em;
  color: var(--color-text);
}

.sobre-img { /* Falando com a div que contem as imagens */
  flex: 1 1 160px; /* Asiconando um "flex-basis", passando um valor para que ele quebre até ele cehagr o valor mínimo passado, então nesse caso quando ele chegar aos 300px ele irá quebrar, e não esperar o conteúdo ficar minímo e só assim quebrar */

  margin: 0 10px; /* Dando um espaçamentro entre as imagens */
}





/* Produtos */

.produtos {
  max-width: 960px;
  margin: 60px auto;
}

.produtos h1 {
  font-size: 3em;
  margin: 0 10px 60px 10px; /* Essa margin para que ele alinhe com o "p" do conteiner acima*/
}

.produtos-container {
  display: flex; /* Para que os itens dentro desse container sejam flex*/
  flex-wrap: wrap; /* Assim que a imagem não couber mais nos 960px ela quebra. Porém dessa maneira as imagens automaticamente irão querbrar por que não defini nenhum flex-grow para elas*/

  align-items: flex-end; /* Maneira de fazer alinhas os itens ao final, dando um designer diferente para o site*/
}

.produtos-item {
  flex: 1 1 175px; /* Defininado um grow para que ele não quebre de imediato e passando o "felx-basis" para que ele quebre a partir do momento que tentarem diminuir a imagem a menos que 175px*/

  /* flex: 1 1 0 - caso eu deixe o basis em "0", ele irá funcionar, porem quem irá definir quando ele irá quebrar é a margin e tipografia do "h2" de cada item, quando não couber mais a tipografia dentro do container, o item inteiro quebra e vai para a baixo. Porém não são todos os navegadores que vão fazer o mesmo. Para corrigir esse erro sem colocar no basis, é defini um "min-width: 175px", que assim ele irá funcionar*/

  margin: 10px;
}

.produtos-item h2 {
  font-size: 3em;
  color: var(--text-h2);
  background: var(--background-sections);
  padding: 60px 20px;
}

.purple {
  border-top: 8px solid var(--purple);
}

.pink {
  border-top: 8px solid var(--pink);
}

.blue {
  border-top: 8px solid var(--blue);

  /* Caso eu queria alinhar esse item diferente dos outros eu utilzo o aling-self */
  /* align-self: center; */
}





/* Preços */

.preco {
  background: var(--background-sections);
  padding: 60px; /* Espaçamento interno */
  display: flex;
  flex-wrap: wrap;
  align-items: flex-end; /* Alinhando os itens dentro dele ao final possivel do cantainer, já que nesse propriemo container (container master) tem padding (espaçamento interno), os itens não irão encostar na linha de baixo dele*/
}

.preco-item {
  flex: 1; /* Querendo assim que os itens aumentem de ponta a ponta*/
  border: 4px solid #FFF;
  padding: 20px; /* Espaçamento interno do container */
  margin: 10px; /* Espaçamento externo, fora do container*/

  /* Em outros navegadores ele acaba não quebrando os itens como esperando, então para resolver isso podemos fazer de duas maneira: definindo um min-width; a Segunda forma é definir no flex: 1 1 260px */
  min-width: 260px; /* DICA: colocando o min-width geralmente smepre abaixo de 280px, por que é o valor minimo que se tem de um telefone(mobile) */
}

.preco-item h2 {
  font-size: 3em;
  color: var(--text-h2);
  text-align: center; /* Como é apenas um texto usamos a prorpiedade "text-aling" para posicionar o texto dentro de um container */
  margin-top: 20px;
}

.preco-item span{
  max-width: 300px;
  margin: 20px auto; /* Dando um espaçamento externo de 20px em cima/baixo e auto para que ele de um espaçamento automatico para ambos os lados, para que não atrapalhe na hora de usar o "text-aling"*/
  display: block; /* Por padrão "span" tem um display inline*/
  font-size: 3em;
  text-align: center;
  font-weight: bold;
  padding: 10px 0 5px 0;
  border-top: 4px solid #FFF;
  border-bottom: 4px solid #FFF;
}

.produtos-item sup {
  font-size: 1.3rem; /* Sendo a medida "rem" relativo a raiz, sendo a raiz em "px"*/
}

.preco-item ul {
  max-width: 300px;
  margin: 20px auto;
  font-size: 1.25em; 
  font-style: italic; /* Estilziação na fonte */
  color: (var(--color-text));
}

.preco-item li {
  display: flex; /* Fazendo com que o texto e a bolinha fiquem um ao lado do outro */
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px; /* Colocando margin-bottom invez de line-heigth, por conta que quando o conteúdo quebrar ficará um vazio bem grande entre os itens e a bolinha dicará estranha em uma reta grande e vazia */
}

.preco-item li::after { /* Criando um pseu do element; falando com depois do li */
  content: '';
  display: block;
  width: 6px;
  height: 6px;
  background: var(--menu-bg);
  border-radius: 50%;
}

.preco-item a {
  max-width: 300px;
  display: block;
  margin: 20px auto;
  border: 4px solid;
  color: #222222;
  text-transform: uppercase; /* Deixando todo o conteúdo em letra maiúscula */
  font-weight: bold;
  font-size: 2.25em;
  padding: 15px 0;
  text-align: center;
}

@media (max-width: 800px) { /* Quando ele chegar em 800px, no  caso quando ele for igual o umenor a 800px*/
  .preco {
    /* Tirando o paddind que ficou grande para um dipositivo mobile */
    padding-left: 10px;
    padding-right: 10px;
  }


  /* Para dispositivos mobile chega a ser mais vantajoso o cliente ver priemiro o item mais vantajoso para mim vender, e para isso quando a tela for menor que 800px eu inverto a ordem dos itens */

  /* Para isso, eu seleciono os itens que eu quero falar, já que todos os 3 tem a mesma classe, eu falo com o filho deles, usando "nth-child()", colocando dentro de parenteses o filho, sendo 1, 2 e 3 */
  .preco .preco-item:nth-child(3){
    order: -2 /* Sendo a order -2 a que vem priemiro do que 0 */
  }

  .preco .preco-item:nth-child(2){
    order: -1 /* Sendo a order -1 a que vem priemiro do que 0 */
  }
  /* E por o cobre começar como order: 0, eu não preciso definir ele */
}





/* Qualidade */

.qualidade {
  max-width: 960px;
  margin: 60px auto;
  display: flex;
  flex-wrap: wrap;
}

.qualidade-item {
  flex: 1 1 300px; /* Definindo uma basis de 300px para que ele tenha esse minimo de 30px e se não der ele quebre em duas colunas */
  margin: 20px 10px;
}

.qualidade-item h2 {
  font-size: 2.5em;
  color: var(--text-h2);
  margin-bottom: 20px;
}

.qualidade-item h2::before { /* Fazendo um pseu do element que virá antes do conteudo */
  content: '';
  display: inline-block;
  width: 8px;
  height: 30px;
  margin-right: 10px;
  /* background: blue; */
}

/* falando com o "qualidade-item", do item 1 e 4, que diz na expressão (3n+1) selecioando pelo pseu do selto, e com o before do h2 especificamente */

/* A expressão (3n+1) signfica que eu quero aplicar a estilização ao item de numero "1", e que aplique tambem ao "item" que virá depois de 3 itens após o item de numero "1", assim contanto 3 itens após o priemiro, e o 3º item encontrado é que irá receber a estilização tambem  */
.qualidade-item:nth-of-type(3n+1) h2::before {/* Sendo um pseu do seletor*/
  background: var(--purple);
}

/* Agora pulando 3 itens ainda, porém começando a partir do 2º item */
.qualidade-item:nth-of-type(3n+3) h2::before {
  background: var(--pink);
}

.qualidade-item:nth-of-type(3n+2) h2::before {
  background: var(--blue);
}

.qualidade-item p {
  font-size: 1.25em;
  line-height: 1.4;
  color: var(--color-text)
}





/* Newsletter */

.newsletter {
  background: var(--background-sections);

  /* Método para se alinha o conteúdo sem ter um outro container que abrange o conteúo todo, tendo apenas 1 container abrangindo tudo */
  padding: 60px calc((100% - 960px) / 2); /* Sendo 60px para cima/baixo, e um calculo de 100% da minha tela horizontal - 960px (que é o tamanho do meu container, dividido por 2.  Assimn não precisando mais do margin: 60px auto */
  display: flex;
  flex-wrap: wrap;
}

.newsletter-info {
  flex: 1 1 240px; /* Caso o basis seja "0" terá problema no safari, então definindo um valor minimo para ele no basis, assim quebrando quando atingir o valor de 240px */

  margin: 0 10px;
}

.newsletter-info h1 {
  font-size: 3em;
  color: var(--text-h2);
}

.newsletter-info p {
  font-size: 1.25em;
  font-style: italic;
  max-width: 230px; /* Definindo uma max-width para que a linha quebre, e não que o texto fique em uma linha só, dando o estilo quebrado */
  color: var(--color-text);
  margin-bottom:10px; /* Em algum momento o formulário irá quebrar e ir para baixo do "p" */
}

.newsletter-form {
  flex: 2 1 260px; /* Pegando 2 vezes o espaço da div de info */
  margin: 0 10px;
  align-self: center; /* Alinhando ele mesmo ao centro*/
  display: flex; /* Isso não fará ele quebrar de linha automaticamente, mas sim quando diminuir o conteúdo a menos de 260px */
  flex-wrap: wrap;
}

.newsletter-form input {
  flex: 3 1 260px; /* Pegando 3 vezes o tamanho do botão e passando o basis para não dar bug com outros navegadores */
  font-size: 1.25em;
  color: var(--color-text);
  font-style: italic;
  font-family: "Nunito", helvetica, arial, sans-serif;
  border: 4px solid var(--menu-bg);
  background: transparent;
  padding: 15px 10px;
  margin: 0; /* Definindo margin 0 por que alguns broswer definim margin ao imput */
  border-radius: 0px; /* O mesmo motivo aqui tambem */
}

.newsletter-form button {
  flex: 1 1 260px;
  font-family: "Nunito", helvetica, arial, sans-serif;
  font-size: 2.25em;
  font-weight: bold;
  text-transform: uppercase;
  background: var(--menu-bg);
  color: #FFF;
  margin: 0;
  cursor: pointer;
  border: 0px;
  padding: 15px 10px;
}

@media (max-width: 600px) { /* Abaixo de 600px ele aplica a estilização*/
  .newsletter-form button {
    font-size: 1.5em;
  }
}





/* Footer */

.footer {
  height: 200px;
  display: flex; /* Não necessariamente se precisaria do display: flex, poderia utilziar o padding */
  background: var(--menu-bg);
  align-items: center;
}

.footer p {
  flex: 1;
  text-align: center; /* Alinahndo o texto ao centro*/

  font-size: 2.25em;
  color: var(--superinfo-bg);
}
